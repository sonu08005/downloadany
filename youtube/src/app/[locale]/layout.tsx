import type { Metadata } from "next";
import "../globals.css";
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { inter_sans } from "../_client/libs/fonts";
import { Header } from "../_client/components/layout/header";
import { Footer } from "../_client/components/layout/footer";
import { ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import { ThemeProvider } from "next-themes";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type LayoutProps = {
  children: React.ReactNode
  params: Promise<{
    locale: string
  }>
}

const Layout = async ({ children, params }: LayoutProps) => {
  const { locale } = await params;

  // FIX: Using .some() for a more robust, type-safe check.
  // This avoids potential type mismatch issues between the generic 'locale' string
  // and the specific string literals that might be in 'routing.locales'.
  if (!routing.locales.some(l => l === locale)) {
    notFound();
  }

  const messages = await getMessages();

  return (
    <html suppressHydrationWarning lang={locale}>
      <body className={`${inter_sans} font-inter bg-body dark:bg-dark_body`}>
        <ThemeProvider attribute="class">
          <NextIntlClientProvider messages={messages}>
            <Header />
            {children}
            <ToastContainer autoClose={3000} />
            <Footer />
          </NextIntlClientProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

export default Layout;
